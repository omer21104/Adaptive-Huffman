package gui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import encoder_decoder.AdaptiveHuffmanEnDeTask;
import main.ProgramHandler;

/**
 * This class handles the gui for the compression program 
 */
public class ProgramGui extends javax.swing.JFrame 
{
    private static final boolean VISIBLE = true;
    private static final boolean ENABLED = true;
    private ProgramHandler handler;

    /** Creates new form ProgramGui */
    public ProgramGui(ProgramHandler handler) {
        initComponents();
        compProgressBar.setVisible(!VISIBLE);
        decompProgressBar.setVisible(!VISIBLE);
        initLookAndFeel();
        
        this.handler = handler; 
        handler.setGuiRef(this);     
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() 
{

        fileChooser = new javax.swing.JFileChooser();
        badInputsErrorPanel = new javax.swing.JPanel();
        badInputsErrorOptionPane = new javax.swing.JOptionPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        compressionPanel = new javax.swing.JPanel();
        compInputFilePathLabel = new javax.swing.JLabel();
        compOutputFilePathLabel = new javax.swing.JLabel();
        selectCompInputFileBtn = new javax.swing.JButton();
        compInputFilePathTextArea = new javax.swing.JTextField();
        compOutputFolderPathTextArea = new javax.swing.JTextField();
        selectCompOutputFolderBtn = new javax.swing.JButton();
        compOutputFileNameLabel = new javax.swing.JLabel();
        compOutputFileNameTextField = new javax.swing.JTextField();
        symbolSizeSlider = new javax.swing.JSlider();
        compSymbolSizeLabel = new javax.swing.JLabel();
        compressBtn = new javax.swing.JButton();
        compProgressBar = new javax.swing.JProgressBar();
        decompPanel = new javax.swing.JPanel();
        decompInputFilePathLabel = new javax.swing.JLabel();
        decompOutputFileNameLabel = new javax.swing.JLabel();
        decompOutputFilePathLabel = new javax.swing.JLabel();
        decompInputFileTextArea = new javax.swing.JTextField();
        decompOutputFileNameTextArea = new javax.swing.JTextField();
        decompOutputFolderPathTextArea = new javax.swing.JTextField();
        selectDecompOutputFolderBtn = new javax.swing.JButton();
        selectDecompInputFileBtn = new javax.swing.JButton();
        decompressBtn = new javax.swing.JButton();
        decompProgressBar = new javax.swing.JProgressBar();

        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Choose file to compress");

        badInputsErrorOptionPane.setMessage("Some inputs are empty");

        javax.swing.GroupLayout badInputsErrorPanelLayout = new javax.swing.GroupLayout(badInputsErrorPanel);
        badInputsErrorPanel.setLayout(badInputsErrorPanelLayout);
        badInputsErrorPanelLayout.setHorizontalGroup(
            badInputsErrorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, badInputsErrorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(badInputsErrorOptionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        badInputsErrorPanelLayout.setVerticalGroup(
            badInputsErrorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(badInputsErrorPanelLayout.createSequentialGroup()
                .addComponent(badInputsErrorOptionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adaptive Huffman Compressor Decompressor");

        compressionPanel.setToolTipText("Hello");

        compInputFilePathLabel.setText("Input file path");

        compOutputFilePathLabel.setText("Output file path");

        selectCompInputFileBtn.setText("Browse");
        selectCompInputFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCompInputFileBtnActionPerformed(evt);
            }
        });

        compInputFilePathTextArea.setFocusable(false);
        compInputFilePathTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compInputFilePathTextAreaActionPerformed(evt);
            }
        });

        compOutputFolderPathTextArea.setFocusable(false);
        compOutputFolderPathTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compOutputFolderPathTextAreaActionPerformed(evt);
            }
        });

        selectCompOutputFolderBtn.setText("Browse");
        selectCompOutputFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCompOutputFolderBtnActionPerformed(evt);
            }
        });

        compOutputFileNameLabel.setText("Output file name");

        symbolSizeSlider.setMajorTickSpacing(1);
        symbolSizeSlider.setMaximum(3);
        symbolSizeSlider.setMinimum(1);
        symbolSizeSlider.setPaintLabels(true);
        symbolSizeSlider.setPaintTicks(true);

        compSymbolSizeLabel.setText("Symbol Size (bytes)");

        compressBtn.setText("Compress");
        compressBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressBtnActionPerformed(evt);
            }
        });

        compProgressBar.setEnabled(false);
        compProgressBar.setIndeterminate(true);

        javax.swing.GroupLayout compressionPanelLayout = new javax.swing.GroupLayout(compressionPanel);
        compressionPanel.setLayout(compressionPanelLayout);
        compressionPanelLayout.setHorizontalGroup(
            compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compressionPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(compressionPanelLayout.createSequentialGroup()
                        .addComponent(symbolSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(compInputFilePathTextArea)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, compressionPanelLayout.createSequentialGroup()
                        .addComponent(compSymbolSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectCompOutputFolderBtn))
                    .addComponent(compOutputFileNameTextField)
                    .addComponent(compOutputFolderPathTextArea, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(compressionPanelLayout.createSequentialGroup()
                        .addComponent(compOutputFileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectCompInputFileBtn))
                    .addGroup(compressionPanelLayout.createSequentialGroup()
                        .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(compressionPanelLayout.createSequentialGroup()
                                .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(compInputFilePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(compOutputFilePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(compProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(compressBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );
        compressionPanelLayout.setVerticalGroup(
            compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compressionPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(compInputFilePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compInputFilePathTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectCompInputFileBtn)
                    .addComponent(compOutputFileNameLabel))
                .addGap(18, 18, 18)
                .addComponent(compOutputFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(compOutputFilePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compOutputFolderPathTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectCompOutputFolderBtn)
                    .addComponent(compSymbolSizeLabel))
                .addGap(18, 18, 18)
                .addComponent(symbolSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(compressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(compressBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(compProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Compression", compressionPanel);

        decompInputFilePathLabel.setText("Input file");

        decompOutputFileNameLabel.setText("Output file name");

        decompOutputFilePathLabel.setText("Output file path");

        decompInputFileTextArea.setFocusable(false);
        
        decompOutputFolderPathTextArea.setFocusable(false);
        
        decompOutputFileNameTextArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompOutputFileNameTextAreaActionPerformed(evt);
            }
        });

        selectDecompOutputFolderBtn.setText("Browse");
        selectDecompOutputFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDecompOutputFolderBtnActionPerformed(evt);
            }
        });

        selectDecompInputFileBtn.setText("Browse");
        selectDecompInputFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDecompInputFileBtnActionPerformed(evt);
            }
        });

        decompressBtn.setText("Decompress");
        decompressBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decompressBtnActionPerformed(evt);
            }
        });

        decompProgressBar.setEnabled(false);
        decompProgressBar.setIndeterminate(true);

        javax.swing.GroupLayout decompPanelLayout = new javax.swing.GroupLayout(decompPanel);
        decompPanel.setLayout(decompPanelLayout);
        decompPanelLayout.setHorizontalGroup(
            decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decompPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(decompPanelLayout.createSequentialGroup()
                        .addComponent(decompOutputFilePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decompPanelLayout.createSequentialGroup()
                        .addGroup(decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(decompOutputFileNameTextArea, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decompOutputFolderPathTextArea, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decompInputFileTextArea, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, decompPanelLayout.createSequentialGroup()
                                .addComponent(decompInputFilePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(decompPanelLayout.createSequentialGroup()
                                .addComponent(decompOutputFileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                                .addComponent(selectDecompInputFileBtn))
                            .addGroup(decompPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(selectDecompOutputFolderBtn))
                            .addGroup(decompPanelLayout.createSequentialGroup()
                                .addComponent(decompProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(decompressBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28))))
        );
        decompPanelLayout.setVerticalGroup(
            decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decompPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(decompInputFilePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decompInputFileTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectDecompInputFileBtn)
                    .addComponent(decompOutputFileNameLabel))
                .addGap(18, 18, 18)
                .addComponent(decompOutputFileNameTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(decompOutputFilePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decompOutputFolderPathTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectDecompOutputFolderBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(decompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(decompProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(decompressBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("Decompression", decompPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>                        

    private void initLookAndFeel() {
    	try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgramGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgramGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgramGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgramGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    private void selectCompInputFileBtnActionPerformed(java.awt.event.ActionEvent evt) 
    {        
    	fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            // What to do with the file, e.g. display it in a TextArea
            String path = file.getAbsolutePath();
            compInputFilePathTextArea.setText(path);

        } else {
            System.out.println("File access cancelled by user.");
        }
    }                                                      

    private void compInputFilePathTextAreaActionPerformed(java.awt.event.ActionEvent evt) 
{                                                          
        // TODO add your handling code here:
    }                                                         

    private void compOutputFolderPathTextAreaActionPerformed(java.awt.event.ActionEvent evt) 
{                                                             
        // TODO add your handling code here:
    }                                                            

    private void selectCompOutputFolderBtnActionPerformed(java.awt.event.ActionEvent evt) 
{                                                          
        int result;

        fileChooser.setCurrentDirectory(new java.io.File("."));

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        fileChooser.setAcceptAllFileFilterUsed(false);
        String outputFolderPath = "";
        //
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            outputFolderPath = fileChooser.getSelectedFile().getAbsolutePath();
        }
        else {
            System.out.println("No Selection ");
        }

        compOutputFolderPathTextArea.setText(outputFolderPath);
    }                                                         

    private void selectDecompInputFileBtnActionPerformed(java.awt.event.ActionEvent evt) 
{                                                         
    	fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            // What to do with the file, e.g. display it in a TextArea
            String path = file.getAbsolutePath();
            decompInputFileTextArea.setText(path);

        } else {
            System.out.println("File access cancelled by user.");
        }
    }                                                        

    private void selectDecompOutputFolderBtnActionPerformed(java.awt.event.ActionEvent evt) 
{                                                            
        int result;

        fileChooser.setCurrentDirectory(new java.io.File("."));

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        fileChooser.setAcceptAllFileFilterUsed(false);
        String outputFolderPath = "";
        //
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            outputFolderPath = fileChooser.getSelectedFile().getAbsolutePath();
        }
        else {
            System.out.println("No Selection ");
        }

        decompOutputFolderPathTextArea.setText(outputFolderPath);
    }                                                           

    private void decompOutputFileNameTextAreaActionPerformed(java.awt.event.ActionEvent evt) 
{                                                             
        // TODO add your handling code here:
        if (decompCheckForEmptyFields()) {
            JOptionPane.showMessageDialog(badInputsErrorPanel, badInputsErrorOptionPane.getMessage());
        }
    }                                                            

    private void compressBtnActionPerformed(java.awt.event.ActionEvent evt) 
    {     
        initCompression();   
    }                                           

    private void decompressBtnActionPerformed(java.awt.event.ActionEvent evt) 
    {                                              
        initDecompression();
    }                                             

    public void showGui(ProgramHandler handler) {
    	/* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 new ProgramGui(handler).setVisible(true);
            }
        });
    }
    
    // methods to change the gui when initializing and finalizing an operation
    public void initCompression()
    {
        // verify valid inputs here
       if (!compCheckForEmptyFields())
       {
           return;
       }
        
       // execute compression task on a separate thread
       new AdaptiveHuffmanEnDeTask(eWorkType.compress, handler).execute();
       
        // show progress bar
        showProgressBar(eWorkType.compress);
        
        // disable the button
        disableBtn(eWorkType.compress);
        
        // disable symbol size selector
        symbolSizeSlider.setEnabled(!ENABLED);
        
        ////// 
        // add logic to actually compress here
        //handler.startCompression();
        
    }
    
    public void finalizeCompression()
    {
        // clear inputs
        compInputFilePathTextArea.setText("");
        compOutputFileNameTextField.setText("");
        compOutputFolderPathTextArea.setText("");
        
        // hide progress bar
        hideProgressBar(eWorkType.compress);
        
        // enable button
        enableBtn(eWorkType.compress);
        
        // enable symbol size slider
        symbolSizeSlider.setEnabled(ENABLED);
    }
    
    public void initDecompression()
    {
         // verify valid inputs here
       if (!decompCheckForEmptyFields())
       {
           return;
       }
        
       // execute decompression task on a separate thread
       new AdaptiveHuffmanEnDeTask(eWorkType.decompress, handler).execute();
       
        // show progress bar
        showProgressBar(eWorkType.decompress);
        
        // disable the button
        disableBtn(eWorkType.decompress);
        
        ////// 
        // add logic to actually compress here
        //handler.startDecompression();
        
    }
    
    public void finalizeDecompression()
    {
        // clear inputs
        decompInputFileTextArea.setText("");
        decompOutputFileNameTextArea.setText("");
        decompOutputFolderPathTextArea.setText("");
        
        // hide progress bar
        hideProgressBar(eWorkType.decompress);
        
        // enable button
        enableBtn(eWorkType.decompress);
    }
    
    public void showDoneMsg() {
    	try
    	{
    		JOptionPane.showMessageDialog(badInputsErrorPanel, "Done!");
    	} catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    // field verification methods
    public boolean compCheckForEmptyFields() 
    {
        if(getCompInputFilePath()[0].equals("") || 
           getCompOutputFileName()[0].equals("") ||
           getCompOutputFolderPath()[0].equals(""))
        {
        	
            JOptionPane.showMessageDialog(badInputsErrorPanel, badInputsErrorOptionPane.getMessage());
            return false;
        }
        
        return true;
    }
    
    public boolean decompCheckForEmptyFields() 
    {
        if(getDecompInputFilePath()[0].equals("") ||
           getDecompOutputFileName()[0].equals("") ||
           getDecompOutputFolderPath()[0].equals(""))
        {
            JOptionPane.showMessageDialog(badInputsErrorPanel, badInputsErrorOptionPane.getMessage());
            return false;
        }
        
        return true;
    }
    
    // getters for compression fields
    public String[] getCompInputFilePath() 
    {
        String[] name = new String[] {compInputFilePathTextArea.getText()};
        return name;
    }
    
    public String[] getCompOutputFolderPath() 
    {
        return new String[] {compOutputFolderPathTextArea.getText()};
    }
    
    public String[] getCompOutputFileName() 
    {
        return new String[] {compOutputFileNameTextField.getText()};
    }
    
    // getters for decompression fields
    public String[] getDecompInputFilePath() 
    {
        return new String[] {decompInputFileTextArea.getText()};
    }
    
    public String[] getDecompOutputFolderPath() 
    {
        return new String[] {decompOutputFolderPathTextArea.getText()};
    }
    
    public String[] getDecompOutputFileName() 
    {
        return new String[] {decompOutputFileNameTextArea.getText()};
    }
    
    // getter for symbol size
    public int getSymbolSize() 
    {
        return symbolSizeSlider.getValue();
    }
    
    // show and hide utility methods
    public void showProgressBar(eWorkType workType)
    {
        if (workType == eWorkType.compress)
        {
            compProgressBar.setVisible(VISIBLE);
        }
        
        else
        {
            decompProgressBar.setVisible(VISIBLE);
        }
    }
    
    public void hideProgressBar(eWorkType workType)
    {
        if (workType == eWorkType.compress)
        {
            compProgressBar.setVisible(!VISIBLE);
        }
        
        else
        {
            decompProgressBar.setVisible(!VISIBLE);
        }
    }
    
    public void disableBtn(eWorkType workType)
    {
        if (workType == eWorkType.compress)
        {
            compressBtn.setEnabled(!ENABLED);
        }
        
        else
        {
            decompressBtn.setEnabled(!ENABLED);
        }
    }
    
    public void enableBtn(eWorkType workType)
    {
        if (workType == eWorkType.compress)
        {
            compressBtn.setEnabled(ENABLED);
        }
        
        else
        {
            decompressBtn.setEnabled(ENABLED);
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JOptionPane badInputsErrorOptionPane;
    private javax.swing.JPanel badInputsErrorPanel;
    private javax.swing.JLabel compInputFilePathLabel;
    private javax.swing.JTextField compInputFilePathTextArea;
    private javax.swing.JLabel compOutputFileNameLabel;
    private javax.swing.JTextField compOutputFileNameTextField;
    private javax.swing.JLabel compOutputFilePathLabel;
    private javax.swing.JTextField compOutputFolderPathTextArea;
    private javax.swing.JProgressBar compProgressBar;
    private javax.swing.JLabel compSymbolSizeLabel;
    private javax.swing.JButton compressBtn;
    private javax.swing.JPanel compressionPanel;
    private javax.swing.JLabel decompInputFilePathLabel;
    private javax.swing.JTextField decompInputFileTextArea;
    private javax.swing.JLabel decompOutputFileNameLabel;
    private javax.swing.JTextField decompOutputFileNameTextArea;
    private javax.swing.JLabel decompOutputFilePathLabel;
    private javax.swing.JTextField decompOutputFolderPathTextArea;
    private javax.swing.JPanel decompPanel;
    private javax.swing.JProgressBar decompProgressBar;
    private javax.swing.JButton decompressBtn;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton selectCompInputFileBtn;
    private javax.swing.JButton selectCompOutputFolderBtn;
    private javax.swing.JButton selectDecompInputFileBtn;
    private javax.swing.JButton selectDecompOutputFolderBtn;
    private javax.swing.JSlider symbolSizeSlider;
    // End of variables declaration                   

}
